function SocketController(a){"use strict";this.option=a,_opt=a}var _opt,_skt;sendMessageToLog=function(a){"use strict";_opt.debugMode&&console.log(a)},SocketController.prototype.sendMessageToSocket=function(a){_skt.send(a),sendMessageToLog("message to room: "+a)},SocketController.prototype.emitMessageToSocket=function(a,b){_skt.emit(a,b),sendMessageToLog("emit message to room: "+a)},SocketController.prototype.registerUser=function(a){var b={userId:a,roomName:_opt.roomSetup.roomName};this.emitMessageToSocket(REGISTER,b),_opt.userRegisteredCallBackFunction()},SocketController.prototype.storeState=function(a,b,c){var d={name:b,vo:a,userId:c};sendMessageToLog("store state "+b),this.emitMessageToSocket(STORE_STATE,d)},SocketController.prototype.getNumberOfRegisteredUsersInRoom=function(a){var b={userId:a,room:_opt.roomSetup.roomName};this.emitMessageToSocket(REQUEST_NUM_OF_USERS,b),sendMessageToLog("request num of users in a room")},SocketController.prototype.getState=function(a,b){sendMessageToLog("get state: "+b);var c={userId:a,room:_opt.roomSetup.roomName,stateName:b};this.emitMessageToSocket(GET_STATE,c)},SocketController.prototype.connectToSocket=function(){_skt=io.connect(_opt.connectURL),sendMessageToLog("connecting to _skt.io on: "+_opt.connectURL),this.listenToMessagesFromSocket()},SocketController.prototype.callDbConnector=function(a,b,c,d){var e={userId:a,methodName:b,room:_opt.roomSetup.roomName,callBackMethodName:c,params:d};this.emitMessageToSocket("dbconnector",e)},SocketController.prototype.listenToMessagesFromSocket=function(){sendMessageToLog("listenToMessages from room: "+_opt.roomSetup.roomName),_skt.on(CONNECT,function(a){SocketController.prototype[CONNECT](a)}),_skt.on(DBCONNECTOR,function(a){SocketController.prototype[DBCONNECTOR](a)}),_skt.on(MESSAGE,function(a){SocketController.prototype[MESSAGE](a)}),_skt.on(REQUEST_NUM_OF_USERS,function(a){SocketController.prototype[REQUEST_NUM_OF_USERS](a)}),_skt.on(GET_STATE,function(a){SocketController.prototype[GET_STATE](a)}),_skt.on(STATE_CHANGE,function(a){SocketController.prototype[STATE_CHANGE](a)})},SocketController.prototype[CONNECT]=function(){_skt.emit(JOIN_ROOM,_opt.roomSetup),sendMessageToLog("connect to room: "+_opt.roomSetup.roomName),_opt.userConnectedCallBackFunction()},SocketController.prototype[DBCONNECTOR]=function(a){sendMessageToLog("dbconnector message back, methodName: "+a.data.methodName),a.data.hasOwnProperty("callBackMethodName")&&window[a.data.callBackMethodName](a)},SocketController.prototype[MESSAGE]=function(a){sendMessageToLog("message from room"),null!=messageFromRoomCallBackfunction&&messageFromRoomCallBackfunction(a)},SocketController.prototype[REQUEST_NUM_OF_USERS]=function(a){sendMessageToLog("numberOfUsersInRoom message: "+a.size),null!=_opt.numOfUsersInARoomCallBackFunction&&_opt.numOfUsersInARoomCallBackFunction(a)},SocketController.prototype[GET_STATE]=function(a){sendMessageToLog("get state results: "+a.name),messageFromRoomCallBackfunction(a.vo)},SocketController.prototype[STATE_CHANGE]=function(a){sendMessageToLog("get state change: "+a.name),_opt.stateChangeCallBackFunction(a.vo)};